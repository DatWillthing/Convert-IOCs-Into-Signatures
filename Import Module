##This file is the import module for the suricata script, all repetitive functions go in here to keep the main script clean##
###ADD WORKING FUNCTIONS HERE###

##Sorts data based on header##
function Sort{
   $Type += $file[$count].type
   $Content += $file[$count].indicator
   $Content += $file[$count].value
   $Message += $file[$count].type 
   $Message += $file[$count].actors
   $Reference += $file[$count].malware_families
   $Reference += $file[$count].published_date
   $Reference += $file[$count].reports  
   $Reference += $file[$count].attribute_tag
   $Classtype += $file[$count].malicious_confidence
   $Classtype += $file[$count].label
}


##Detects hashes in the type field and outputs accordingly##
Function hash{
  $Content += $indicator | select-string -pattern "|^"
  if ($type -match "IP|*") {
      $content += $indicator | select-string -pattern "^|" 
   }
}


##Main work function, iterates through every type and sorts based on that##
function TypeFunction{
  if ($type -eq ip_address){
    Sort()
    $IP-SRC = $Content
   }
  if ($type -eq ip-src){
    Sort()
    $IP-SRC = $Content
   }
   if ($type -eq ip-dst){
    Sort()
    $IP-DST = $Content
   }
}





##Detects filetypes other than CSV##
Function Detect-Filetype {
    if ($FileExten -eq ".xlsx") {
        write-host "Excel!!"
        #Excel-File($File)
    }
    elseif ($FileExten -eq ".csv") {
        write-host "CSV yes, please!!"
        #Check-Headers
    }
    elseif ($FileExten -eq "") {
        write-host "I did not detect a file extension..."
    }
    else {
        write-host "Something didn't work..."
    }
}




Function Detect-Filetype {
    if ($FileExten -eq ".xlsx") {
        write-host "Excel!!"
        #StripExcelHeader()
        #Excel-File($File)
    }
    elseif ($FileExten -eq ".csv") {
        write-host "CSV yes, please!!"
        #Check-Headers
    }
    elseif ($FileExten -eq "") {
        write-host "I did not detect a file extension..."
    }
    else {
        write-host "Something didn't work..."
    }
}

Function Excel-File ($File) {
    #Ensure the naming scheme is right...
    $Excel = New-Object -ComObject Excel.Application
    $wb = $Excel.Workbooks.Open($File)
    foreach ($ws in $wb.Worksheets) {
        $ws.SaveAs($FilePath + "\" + $FileName + ".csv", 6)
    ###Use a Join-Path here if possible...
       $File = "$FilePath" + "\" + "$FileName" + ".csv"
       write-host="$File"
    }
    $Excel.Quit()
    write-host "`$File = $File"
    Detect-Filetype
}

Function Build-Results {
    New-Item -Name "Results" -ItemType Directory -Path $PSScriptRoot
    #Edit permissions?
    New-Item -Name "Readme.txt" -ItemType File -Path $ResultsPath
    $TemplateContent = get-content -path $TempReadmePath
    Invoke-expression """$TemplateContent""" | set-content -path $ReadmePath
}

function normalizefile{
   Detect-Filetype()
}


